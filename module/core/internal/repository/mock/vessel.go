// Code generated by MockGen. DO NOT EDIT.
// Source: vessel.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	util "github.com/joshiaj7/vessel-management/internal/util"
	entity "github.com/joshiaj7/vessel-management/module/core/entity"
	param "github.com/joshiaj7/vessel-management/module/core/param"
)

// MockVesselRepository is a mock of VesselRepository interface.
type MockVesselRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVesselRepositoryMockRecorder
}

// MockVesselRepositoryMockRecorder is the mock recorder for MockVesselRepository.
type MockVesselRepositoryMockRecorder struct {
	mock *MockVesselRepository
}

// NewMockVesselRepository creates a new mock instance.
func NewMockVesselRepository(ctrl *gomock.Controller) *MockVesselRepository {
	mock := &MockVesselRepository{ctrl: ctrl}
	mock.recorder = &MockVesselRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVesselRepository) EXPECT() *MockVesselRepositoryMockRecorder {
	return m.recorder
}

// CreateVessel mocks base method.
func (m *MockVesselRepository) CreateVessel(ctx context.Context, params *param.CreateVessel) (*entity.Vessel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVessel", ctx, params)
	ret0, _ := ret[0].(*entity.Vessel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVessel indicates an expected call of CreateVessel.
func (mr *MockVesselRepositoryMockRecorder) CreateVessel(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVessel", reflect.TypeOf((*MockVesselRepository)(nil).CreateVessel), ctx, params)
}

// GetVessel mocks base method.
func (m *MockVesselRepository) GetVessel(ctx context.Context, params *param.GetVessel) (*entity.Vessel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVessel", ctx, params)
	ret0, _ := ret[0].(*entity.Vessel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVessel indicates an expected call of GetVessel.
func (mr *MockVesselRepositoryMockRecorder) GetVessel(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVessel", reflect.TypeOf((*MockVesselRepository)(nil).GetVessel), ctx, params)
}

// ListVessels mocks base method.
func (m *MockVesselRepository) ListVessels(ctx context.Context, params *param.ListVessels) ([]*entity.Vessel, *util.OffsetPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVessels", ctx, params)
	ret0, _ := ret[0].([]*entity.Vessel)
	ret1, _ := ret[1].(*util.OffsetPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVessels indicates an expected call of ListVessels.
func (mr *MockVesselRepositoryMockRecorder) ListVessels(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVessels", reflect.TypeOf((*MockVesselRepository)(nil).ListVessels), ctx, params)
}

// LockVessel mocks base method.
func (m *MockVesselRepository) LockVessel(ctx context.Context, eObj *entity.Vessel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockVessel", ctx, eObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockVessel indicates an expected call of LockVessel.
func (mr *MockVesselRepositoryMockRecorder) LockVessel(ctx, eObj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockVessel", reflect.TypeOf((*MockVesselRepository)(nil).LockVessel), ctx, eObj)
}

// UpdateVessel mocks base method.
func (m *MockVesselRepository) UpdateVessel(ctx context.Context, eObj *entity.Vessel, params *param.UpdateVessel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVessel", ctx, eObj, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVessel indicates an expected call of UpdateVessel.
func (mr *MockVesselRepositoryMockRecorder) UpdateVessel(ctx, eObj, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVessel", reflect.TypeOf((*MockVesselRepository)(nil).UpdateVessel), ctx, eObj, params)
}
